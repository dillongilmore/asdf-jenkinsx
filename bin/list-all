#!/usr/bin/env bash
#
# refactored from minikube
#

set -e
set -o pipefail

# stolen from https://github.com/rbenv/ruby-build/pull/631/files#diff-fdcfb8a18714b33b07529b7d02b54f1dR942
function __jenkinsx_sort_versions() {
  sed 'h; s/[+-]/./g; s/.p\([[:digit:]]\)/.z\1/; s/$/.z/; G; s/\n/ /' |
    LC_ALL=C sort -t. -k 1,1 -k 2,2n -k 3,3n -k 4,4n -k 5,5n          |
    awk '{print $2}' | tr "\n" " "
}

# stolen from asdf-minikube
function __jenkinsx_tag_name() {
  grep -oE "tag_name\":\s?\".{1,15}\"," |
    sed -E 's/tag_name\":\s?\"v([0-9\.]+)\",/\1/'
}

# stolen from asdf-minikube and refactored
function __jenkinsx_http_versions() {
  local releases_path="https://api.github.com/repos/jenkins-x/jx/releases"
  local bin="curl"
  local options="-s"
  local cmd=""

  if [ -n "$OAUTH_TOKEN" ]; then
    cmd="$bin $options -H 'Authorization: token ${OAUTH_TOKEN}' $releases_path"
  else
    cmd="$cmd $options $releases_path"
  fi

  # IMPROVE: Using eval because bash. Try to remove eval.
  local results="$(eval "$cmd")"
  if [ -n "$DEBUG" ]; then
    printf "\n$cmd\n" 1>&2

    local linecount="$(wc -l <<< "$results")"
    if [ $linecount -gt 100 ]; then
      printf "\nResponse is '$linecount' lines long.\n" 1>&2
    else
      printf "\n$results\n" 1>&2
    fi
  fi

  printf "$results"
}

# wrap everything up into a main function
function __jenkinsx_main() {
  if [ -n "$DEBUG" ]; then
    __jenkinsx_http_versions | __jenkinsx_tag_name | __jenkinsx_sort_versions 1>&2
  fi

  __jenkinsx_http_versions | __jenkinsx_tag_name | __jenkinsx_sort_versions
}

# Above functions don't have a newline so just wrap this in an echo to have
# clean output.
echo "$(__jenkinsx_main)"

